@page "/auth/login"

@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject IUserService UserService
@inject ILocalStorageService LocalStorage


<div class=" w-100 d-flex flex-column justify-content-center align-items-center login-form-container">

	<h3 class="login-header">Login</h3>

	<EditForm Model="loginUser" OnValidSubmit="HandleSubmitLoginForm">
		<DataAnnotationsValidator />
		<div class="form-floating mb-3">
			<InputText type="text" class="form-control" id="floatingInput" @bind-Value="loginUser.Username"></InputText>
			<label for="floatingInput">Username</label>

		</div>
		<div class="form-floating mb-3">
			<InputText type="password" class="form-control" id="floatingInput" @bind-Value="loginUser.Password"></InputText>
			<label for="floatingInput">Password</label>

		</div>
		<div class="buttons-container">
			<button type="submit" class="btn btn-success login-button w-100 @(loginUser.Username.Length>=3 && loginUser.Password.Length>=6 ? "":"disabled")">
				Login
			</button>
			<button class="btn btn-link w-100 mt-1 redirect-to-register" @onclick="NavigateToRegisterPage">
				I don't have an account
			</button>
		</div>
	</EditForm>


</div>

@code {
	protected LoginUserDTO loginUser = new();
	private bool isFormSubmitted = false;
	private bool isLoginSuccessful = false;

	private void NavigateToRegisterPage()
	{
		NavigationManager.NavigateTo("/auth/register");
	}

	private async Task HandleSubmitLoginForm()
	{

		isFormSubmitted = false;
		ServiceResponse<string> response = await UserService.Login(loginUser);

		if (!response.IsSuccessful)
		{
			isLoginSuccessful = false;
		}
		else
		{
			await LocalStorage.SetItemAsync("authToken", response.Data);
			isLoginSuccessful = true;
			await JSRuntime.InvokeVoidAsync("ShowSuccessfulAlert", "Logged in successfully");
		}

		isFormSubmitted = true;
	}




}
