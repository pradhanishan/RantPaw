@inject IPostService PostService
@inject AuthenticationStateProvider GetAuthenticationStateAsync

<h3>BrowsePosts</h3>

@if (isLoading)
{
	<div class="spinner-border" role="status">
		<span class="visually-hidden">Loading...</span>
	</div>
}
@if (isLoadedSuccessfully)
{
	<ul class="posts-container">
		@foreach (var post in response.Data!)
		{
			<li>
				<div class="card h-100" style="width: 18rem;">
					<img src="/images/bulldog.jpg" class="card-img-top" alt="...">
					<div class="card-body">
						<h5 class="card-title @(post.AuthorName.Trim().ToLower().Equals("anonymous")?"text-secondary":"text-success")">@post.AuthorName</h5>
						<p class="card-text fst-italic">@post.Description</p>
					</div>
					<div class="card-body w-100 d-flex justify-content-between">
						<div class="btn-group" role="group" aria-label="Basic mixed styles example">

							@if (post.Reactions.Any(u => u.ReactorId == loggedInUserId && u.Reaction == "like") || post.AuthorId == loggedInUserId)
							{
								<button type="button" class="btn btn-secondary" disabled><i class="bi bi-hand-thumbs-up-fill"></i><span>@post.Reactions.Where(p=>p.Reaction=="like").Count()</span></button>
							}
							else
							{
								<button type="button" class="btn btn-outline-success"><i class="bi bi-hand-thumbs-up-fill"></i> <span>@post.Reactions.Where(p=>p.Reaction=="like").Count()</span>  </button>
							}
							@if (post.Reactions.Any(u => u.ReactorId == loggedInUserId && u.Reaction == "dislike") || post.AuthorId == loggedInUserId)
							{
								<button type="button" class="btn btn-secondary" disabled><i class="bi bi-hand-thumbs-down-fill"></i> <span>@post.Reactions.Where(p=>p.Reaction=="dislike").Count()</span></button>
							}
							else
							{
								<button type="button" class="btn btn-outline-danger"><i class="bi bi-hand-thumbs-down-fill"></i> <span>@post.Reactions.Where(p=>p.Reaction=="dislike").Count()</span></button>
							}

						</div>
						<div>

							<button type="button" class="btn btn-outline-warning"><i class="bi bi-three-dots"></i> <span>@post.Reactions.Count()</span></button>
						</div>
					</div>
				</div>
			</li>
		}
	</ul>

	<div class="btn-toolbar mb-3" role="toolbar" aria-label="Toolbar with button groups">
		<div class="btn-group me-2" role="group" aria-label="First group">

			@if (startingNumber - 3 >= 1)
			{
				<button type="button" class="btn btn-outline-secondary" @onclick="()=>FetchPosts(startingNumber,3,false)"><i class="bi bi-arrow-left"></i>Prev</button>
			}
			else
			{
				<button type="button" class="btn btn-outline-secondary" disabled><i class="bi bi-arrow-left"></i>Prev</button>
			}
			@if (startingNumber + 3 <= numberOfPosts)
			{

				<button type="button" class="btn btn-outline-secondary" @onclick="()=>FetchPosts(startingNumber,3,true)"><i class="bi bi-arrow-right"></i>Next</button>
			}
			else
			{
				<button type="button" class="btn btn-outline-secondary" disabled><i class="bi bi-arrow-right"></i>Next</button>
			}

		</div>
	</div>



}


@code {

	ServiceResponse<List<GetPostWithPostReactionDTO>> response = new();
	private bool isLoaded = false;
	private bool isLoading = false;
	private bool isLoadedSuccessfully = false;
	private string responseMessage = string.Empty;
	private int numberOfPosts;
	private int startingNumber = 1;
	private int loggedInUserId;

	protected override async Task OnInitializedAsync()
	{
		isLoading = true;
		var numberOfPostsResponse = await PostService.GetPostsCount();
		numberOfPosts = numberOfPostsResponse.Data;

		await FetchPosts(1, 3, true);

	}

	protected async Task FetchPosts(int startingRow, int numberOfRows, bool next)
	{

		var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
		loggedInUserId = Int32.Parse(authState.User.Claims.FirstOrDefault()!.Value);


		response = await PostService.GetAllWithReactionsBetween(startingRow, numberOfRows);

		if (response.IsSuccessful)
		{
			isLoaded = true;
			isLoading = false;
			isLoadedSuccessfully = true;
		}
		else
		{
			isLoaded = true;
			isLoading = false;
			isLoadedSuccessfully = false;
			responseMessage = response.Message;
		}
		if (next)
		{
			if (startingNumber + 3 <= numberOfPosts) startingNumber += 3;
		}
		else
		{
			if (startingNumber - 3 >= 1) startingNumber -= 3;
		}
		StateHasChanged();
	}

}
